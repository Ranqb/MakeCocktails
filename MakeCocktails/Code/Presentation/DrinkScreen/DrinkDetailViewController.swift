//
//  DrinkDetailViewController.swift
//  MakeCocktails
//
//  Created by Andrey Nedov on 04/05/2019.
//  Copyright (c) 2019 Andrey Nedov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DrinkDetailDisplayLogic: class
{
    func displayDrink(viewModel: DrinkDetail.FetchDrink.ViewModel.Success)
    func displayError(viewModel: DrinkDetail.FetchDrink.ViewModel.Failure)
    func displaySaveDrink(viewModel: DrinkDetail.SaveDrink.ViewModel)
    func displayRemoveDrink(viewModel: DrinkDetail.RemoveDrink.ViewModel)
}

class DrinkDetailViewController: ViewController
{
    //MARK: IBOutlets
    
    @IBOutlet var tableView: UITableView!
    
    // MARK: Properties
    
    var interactor: DrinkDetailBusinessLogic?
    var router: (NSObjectProtocol & DrinkDetailRoutingLogic & DrinkDetailDataPassing)?
    
    private var drink: DisplayedDrinkDetail?
    private var rightBarButtonItem: UIBarButtonItem?
    private var isInStorage = false

    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DrinkDetailInteractor()
        let presenter = DrinkDetailPresenter()
        let router = DrinkDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupTableView()
        getDrink()
    }
    
    // MARK: Private Helpers
    private func setupNavigationButton(drink: DisplayedDrinkDetail) {
        rightBarButtonItem =
            UIBarButtonItem.init(
                image:drink.isInStorage ? UIImage(named: "saved") : UIImage(named: "unsaved"),
                style: .done, target: self, action: #selector(didPressedStorageButton))
        self.navigationItem.rightBarButtonItem = rightBarButtonItem
    }
    

    
    private func setupTableView() {
        tableView.dataSource = self
        tableView.delegate = self
        tableView.register(DrinkDetailTitleCell.self)
        tableView.register(DrinkDetailIngredientsCell.self)
        tableView.register(DrinkDetailDescriptionCell.self)
        tableView.tableFooterView = UIView()
    }
    
    private func getDrink() {
        displayLoading()
        let request = DrinkDetail.FetchDrink.Request()
        interactor?.fetchDrinkDetail(request: request)
    }
    
    @objc private func didPressedStorageButton() {
        guard let drink = drink else { return }
        if isInStorage {
            let request = DrinkDetail.RemoveDrink.Request(drinkId: drink.id)
            interactor?.removeDrink(request: request)
        } else {
            let request = DrinkDetail.SaveDrink.Request(drink: drink)
            interactor?.saveDrink(request: request)
        }
    }
}

extension DrinkDetailViewController: DrinkDetailDisplayLogic{
    func displayDrink(viewModel: DrinkDetail.FetchDrink.ViewModel.Success) {
        displayContent()
        setupNavigationButton(drink: viewModel.displayedDrink)
        drink = viewModel.displayedDrink
        title = drink?.name
        tableView.reloadData()
    }
    
    func displayError(viewModel: DrinkDetail.FetchDrink.ViewModel.Failure) {
        displayContent()
        display(errorViewModel: viewModel.errorViewModel)
    }
    
    func displaySaveDrink(viewModel: DrinkDetail.SaveDrink.ViewModel) {
        rightBarButtonItem?.setBackgroundImage(UIImage(named: "saved"), for: .normal, barMetrics: .default)
        isInStorage = true
    }
    func displayRemoveDrink(viewModel: DrinkDetail.RemoveDrink.ViewModel) {
        rightBarButtonItem?.setBackgroundImage(UIImage(named: "unsaved"), for: .normal, barMetrics: .default)
        isInStorage = false
    }
}

extension DrinkDetailViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return drink?.fieldsCount ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == 0 {
            let cell: DrinkDetailTitleCell = tableView.dequeue(for: indexPath)
            cell.configure(drink)
            return cell
        }else if let count = drink?.fieldsCount, indexPath.row == count - 1{
            let cell: DrinkDetailDescriptionCell = tableView.dequeue(for: indexPath)
            cell.configure(drink)
            return cell
        }else{
            let cell: DrinkDetailIngredientsCell = tableView.dequeue(for: indexPath)
            cell.configure(drink?.ingredients[indexPath.row - 1])
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        if indexPath.row != 0, let count = drink?.fieldsCount, indexPath.row != count - 1{
            let request = DrinkDetail.SelectIngredient.Request(ingredient: drink?.ingredients[indexPath.row - 1].name ?? "")
            interactor?.fetchDrinksByIngredient(request: request)
            router?.routeToDrinks()
        }
    }
}

