//
//  FavoriteDrinkListPresenter.swift
//  MakeCocktails
//
//  Created by Andrey Nedov on 16/06/2019.
//  Copyright (c) 2019 Andrey Nedov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavoriteDrinkListPresentationLogic
{
    func presentDrinks(response: FavoriteDrinkList.FetchDrinks.Response)
}

class FavoriteDrinkListPresenter: FavoriteDrinkListPresentationLogic
{
    weak var viewController: FavoriteDrinkListDisplayLogic?
    
    // MARK: FavoriteDrinkListPresentationLogic
    
    func presentDrinks(response: FavoriteDrinkList.FetchDrinks.Response)
    {
        switch response.result {
        case .success(let drinks):
            handleSuccessFetchedDrinks(drinks)
        case .failure(let error):
            handleError(error)
        }
    }
    
    // MARK: Private Helpers
    
    private func handleSuccessFetchedDrinks(_ drinks: [DrinkModel]?) {
        guard let drinks = drinks else { return }
        var displayedDrinks: [FavoriteDisplayedDrink] = []
        for drink in drinks {
            let displayedDrink = FavoriteDisplayedDrink(with: drink)
            displayedDrinks.append(displayedDrink)
        }
        let viewModel = FavoriteDrinkList.FetchDrinks.ViewModel.Success(displayedDrinks: displayedDrinks)
        viewController?.displayDrinks(viewModel: viewModel)
    }
    
    private func handleError(_ error: Error) {
        let errorViewModel = ErrorViewModel(error: error)
        let viewModel = FavoriteDrinkList.FetchDrinks.ViewModel.Failure(errorViewModel: errorViewModel)
        viewController?.displayError(viewModel: viewModel)
    }
}
